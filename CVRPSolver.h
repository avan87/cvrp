/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CVRPSolver_H
#define CVRPSolver_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cvrp_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CVRPSolverIf {
 public:
  virtual ~CVRPSolverIf() {}
  virtual void routes(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps) = 0;
};

class CVRPSolverIfFactory {
 public:
  typedef CVRPSolverIf Handler;

  virtual ~CVRPSolverIfFactory() {}

  virtual CVRPSolverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CVRPSolverIf* /* handler */) = 0;
};

class CVRPSolverIfSingletonFactory : virtual public CVRPSolverIfFactory {
 public:
  CVRPSolverIfSingletonFactory(const boost::shared_ptr<CVRPSolverIf>& iface) : iface_(iface) {}
  virtual ~CVRPSolverIfSingletonFactory() {}

  virtual CVRPSolverIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CVRPSolverIf* /* handler */) {}

 protected:
  boost::shared_ptr<CVRPSolverIf> iface_;
};

class CVRPSolverNull : virtual public CVRPSolverIf {
 public:
  virtual ~CVRPSolverNull() {}
  void routes(std::vector<std::vector<int64_t> > & /* _return */, const std::vector<std::vector<int64_t> > & /* vec */, const std::vector<int64_t> & /* demands */, const std::vector<int64_t> & /* v_caps */) {
    return;
  }
};

typedef struct _CVRPSolver_routes_args__isset {
  _CVRPSolver_routes_args__isset() : vec(false), demands(false), v_caps(false) {}
  bool vec :1;
  bool demands :1;
  bool v_caps :1;
} _CVRPSolver_routes_args__isset;

class CVRPSolver_routes_args {
 public:

  CVRPSolver_routes_args(const CVRPSolver_routes_args&);
  CVRPSolver_routes_args& operator=(const CVRPSolver_routes_args&);
  CVRPSolver_routes_args() {
  }

  virtual ~CVRPSolver_routes_args() throw();
  std::vector<std::vector<int64_t> >  vec;
  std::vector<int64_t>  demands;
  std::vector<int64_t>  v_caps;

  _CVRPSolver_routes_args__isset __isset;

  void __set_vec(const std::vector<std::vector<int64_t> > & val);

  void __set_demands(const std::vector<int64_t> & val);

  void __set_v_caps(const std::vector<int64_t> & val);

  bool operator == (const CVRPSolver_routes_args & rhs) const
  {
    if (!(vec == rhs.vec))
      return false;
    if (!(demands == rhs.demands))
      return false;
    if (!(v_caps == rhs.v_caps))
      return false;
    return true;
  }
  bool operator != (const CVRPSolver_routes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CVRPSolver_routes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CVRPSolver_routes_pargs {
 public:


  virtual ~CVRPSolver_routes_pargs() throw();
  const std::vector<std::vector<int64_t> > * vec;
  const std::vector<int64_t> * demands;
  const std::vector<int64_t> * v_caps;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CVRPSolver_routes_result__isset {
  _CVRPSolver_routes_result__isset() : success(false) {}
  bool success :1;
} _CVRPSolver_routes_result__isset;

class CVRPSolver_routes_result {
 public:

  CVRPSolver_routes_result(const CVRPSolver_routes_result&);
  CVRPSolver_routes_result& operator=(const CVRPSolver_routes_result&);
  CVRPSolver_routes_result() {
  }

  virtual ~CVRPSolver_routes_result() throw();
  std::vector<std::vector<int64_t> >  success;

  _CVRPSolver_routes_result__isset __isset;

  void __set_success(const std::vector<std::vector<int64_t> > & val);

  bool operator == (const CVRPSolver_routes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CVRPSolver_routes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CVRPSolver_routes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CVRPSolver_routes_presult__isset {
  _CVRPSolver_routes_presult__isset() : success(false) {}
  bool success :1;
} _CVRPSolver_routes_presult__isset;

class CVRPSolver_routes_presult {
 public:


  virtual ~CVRPSolver_routes_presult() throw();
  std::vector<std::vector<int64_t> > * success;

  _CVRPSolver_routes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CVRPSolverClient : virtual public CVRPSolverIf {
 public:
  CVRPSolverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CVRPSolverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void routes(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps);
  void send_routes(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps);
  void recv_routes(std::vector<std::vector<int64_t> > & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CVRPSolverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CVRPSolverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CVRPSolverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_routes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CVRPSolverProcessor(boost::shared_ptr<CVRPSolverIf> iface) :
    iface_(iface) {
    processMap_["routes"] = &CVRPSolverProcessor::process_routes;
  }

  virtual ~CVRPSolverProcessor() {}
};

class CVRPSolverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CVRPSolverProcessorFactory(const ::boost::shared_ptr< CVRPSolverIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CVRPSolverIfFactory > handlerFactory_;
};

class CVRPSolverMultiface : virtual public CVRPSolverIf {
 public:
  CVRPSolverMultiface(std::vector<boost::shared_ptr<CVRPSolverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CVRPSolverMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CVRPSolverIf> > ifaces_;
  CVRPSolverMultiface() {}
  void add(boost::shared_ptr<CVRPSolverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void routes(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->routes(_return, vec, demands, v_caps);
    }
    ifaces_[i]->routes(_return, vec, demands, v_caps);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CVRPSolverConcurrentClient : virtual public CVRPSolverIf {
 public:
  CVRPSolverConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CVRPSolverConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void routes(std::vector<std::vector<int64_t> > & _return, const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps);
  int32_t send_routes(const std::vector<std::vector<int64_t> > & vec, const std::vector<int64_t> & demands, const std::vector<int64_t> & v_caps);
  void recv_routes(std::vector<std::vector<int64_t> > & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
